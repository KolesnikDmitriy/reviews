// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reviews

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ReviewsClient is the client API for Reviews service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewsClient interface {
	CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*CreateReviewResponse, error)
	GetRating(ctx context.Context, in *GetRatingRequest, opts ...grpc.CallOption) (*GetRatingResponse, error)
}

type reviewsClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewsClient(cc grpc.ClientConnInterface) ReviewsClient {
	return &reviewsClient{cc}
}

func (c *reviewsClient) CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*CreateReviewResponse, error) {
	out := new(CreateReviewResponse)
	err := c.cc.Invoke(ctx, "/Reviews/CreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewsClient) GetRating(ctx context.Context, in *GetRatingRequest, opts ...grpc.CallOption) (*GetRatingResponse, error) {
	out := new(GetRatingResponse)
	err := c.cc.Invoke(ctx, "/Reviews/GetRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewsServer is the server API for Reviews service.
// All implementations must embed UnimplementedReviewsServer
// for forward compatibility
type ReviewsServer interface {
	CreateReview(context.Context, *CreateReviewRequest) (*CreateReviewResponse, error)
	GetRating(context.Context, *GetRatingRequest) (*GetRatingResponse, error)
	mustEmbedUnimplementedReviewsServer()
}

// UnimplementedReviewsServer must be embedded to have forward compatible implementations.
type UnimplementedReviewsServer struct {
}

func (UnimplementedReviewsServer) CreateReview(context.Context, *CreateReviewRequest) (*CreateReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedReviewsServer) GetRating(context.Context, *GetRatingRequest) (*GetRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRating not implemented")
}
func (UnimplementedReviewsServer) mustEmbedUnimplementedReviewsServer() {}

// UnsafeReviewsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewsServer will
// result in compilation errors.
type UnsafeReviewsServer interface {
	mustEmbedUnimplementedReviewsServer()
}

func RegisterReviewsServer(s *grpc.Server, srv ReviewsServer) {
	s.RegisterService(&_Reviews_serviceDesc, srv)
}

func _Reviews_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewsServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Reviews/CreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewsServer).CreateReview(ctx, req.(*CreateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reviews_GetRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewsServer).GetRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Reviews/GetRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewsServer).GetRating(ctx, req.(*GetRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reviews_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Reviews",
	HandlerType: (*ReviewsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReview",
			Handler:    _Reviews_CreateReview_Handler,
		},
		{
			MethodName: "GetRating",
			Handler:    _Reviews_GetRating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/reviews.proto",
}
